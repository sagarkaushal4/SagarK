{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode1","htmlfor","toggleMode2","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","style","backgroundColor","color","fontSize","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","length","defaultProps","about","Alert","alert","role","word","lower","charAt","slice","capatalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.109a9af9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg text-bg-${props.mode}`}>\r\n    <div className=\"container-fluid \">\r\n      <a className={`navbar-brand text-${props.mode==='light' ? 'dark':'light'}`} href=\"#\">{props.title}</a>\r\n      {/* <Link className={`navbar-brand text-${props.mode==='light' ? 'dark':'light'}`} to=\"/\">{props.title}</Link> */}\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <Link className={`nav-link active text-${props.mode==='light' ? 'dark':'light'} `} aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            <a className={`nav-link active text-${props.mode==='light' ? 'dark':'light'} `} aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className={`nav-link text-${props.mode==='light' ? 'dark':'light'} `} to=\"/About\">{props.about}</Link>\r\n          </li> */}\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary \" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`} >\r\n        <input className=\"form-check-input mx-2 \" onClick={props.toggleMode1} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label \" htmlfor=\"flexSwitchCheckDefault\">DARK MODE</label>\r\n        </div>\r\n\r\n        <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`} >\r\n        <input className=\"form-check-input mx-2\" onClick={props.toggleMode2} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">GREEN MODE</label>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes ={title : PropTypes.string.isRequired,\r\n                    about: PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'set title here',\r\n    about: 'About'\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"uppercase was clicked!\" + text);\r\n        let newText =text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase !\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n      // console.log(\"uppercase was clicked!\" + text);\r\n      let newText =text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to lowercase !\", \"success\");\r\n    }\r\n\r\n    const handleClrClick = ()=>{\r\n      // console.log(\"uppercase was clicked!\" + text);\r\n      let newText =\"\";\r\n      setText(newText);\r\n      props.showAlert(\"Text cleared! \", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n      navigator.clipboard.writeText(text)\r\n      props.showAlert(\"Text copied! \", \"success\");\r\n          \r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n      let newText = text.split(/[ ] + /);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Extra space removed! \", \"success\");\r\n    }\r\n    \r\n    // const handleLightTheme = () => {\r\n    //   document.querySelector('.body').style.backgroundColor = \"white\"\r\n    // }\r\n\r\n    // const handleDarkTheme = () => {\r\n    //   document.querySelector('.body').style.backgroundColor = \"black\"\r\n    //   document.querySelector('.body').style.color = \"white\"\r\n      \r\n    // }\r\n\r\n    const handleOnChange = (event)=>{\r\n      // console.log(\"on chnage\");\r\n      setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('Enter Text Here');\r\n    // text=\"newtext\";   //wrong way to change the state\r\n    // setText(\"adfgkmgkgg\");  //correct way to change the state\r\n  return (\r\n    <>\r\n    <div className='container'>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark' ? 'black':'white', color:props.mode==='light' ? 'black':'white', fontSize:18}} id=\"mybox\" rows=\"10\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleClrClick}>Clear text</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleCopyClick}>Copy to clipboard</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n\r\n        {/* <button className=\"btn btn-danger mx-2\" onClick={handleLightTheme}>Light mode</button> */}\r\n        {/* <button className=\"btn btn-danger mx-2\" onClick={handleDarkTheme}>Dark mode</button> */}\r\n\r\n    </div>\r\n    <div className=\"container my-2 \">\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{ 0.008 * text.split(\" \").length} Minutes read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capatalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong> {capatalize(props.alert.type)} </strong>: {props.alert.msg} \r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {  BrowserRouter as Router,  Routes,  Route} from \"react-router-dom\";\nimport './App.css';\n\n// import {\n//   BrowserRouter as Router,\n//   // Switch,\n//   Routes,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n// import { isCursorAtEnd } from '@testing-library/user-event/dist/utils';\nfunction App() {\n  const [mode, setMode] = useState('light');  //whether dark mode enabled or not\n\n  const toggleMode1 = ()=>{\n      if(mode === 'light')\n      {\n        setMode('dark');\n        document.body.style.backgroundColor = 'black';//black\n        document.body.style.color='white';//white\n        showAlert(\"dark mode enabled\",\"success\");\n        document.title =\"TEXTTOOLS - DARK MODE\"\n\n        // setInterval(()=>{\n        //   document.title =\"TEXTTOOLS is amazing!\";\n        // },500)\n\n        // setInterval(()=>{\n        //   document.title =\"Install TEXTTOOLS!\";\n        // },1000)\n\n      }\n      else\n      {\n        setMode('light');\n        document.body.style.backgroundColor = 'white';\n        document.body.style.color='black';\n        showAlert(\"light mode enabled\",\"success\");\n      }\n  }\n\n  const toggleMode2 = ()=>{\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = '#233D00';//black\n      document.body.style.color='#D7FFA2';//white\n      showAlert(\" dark green mode enabled\",\"success\");\n    }\n    else\n    {\n      setMode('light');\n      document.body.style.backgroundColor = '#D7FFA2';\n      document.body.style.color='#233D00';\n      showAlert(\"light green mode enabled\",\"success\");\n    }\n}\n\n  const [alert, setAlert] =useState(null);\n  \n  const showAlert = (message,type)=>{\n     setAlert({\n      msg: message,\n      type: type\n     })\n     setTimeout(()=>{\n      setAlert(null);\n    },1500)\n  }\n\n  return (\n    <>\n      {/* <Navbar title=\"TEXTTOOLS\" about=\"AboutTextTOOLS\"/> */}\n      {/* <Router> */}\n      <Navbar title=\"TEXTTOOLS\" mode={mode}  toggleMode1={toggleMode1} toggleMode2={toggleMode2} alert={alert}/>\n      <Alert alert={alert}/>\n      {/* <Navbar/> */}\n     \n        <div className=\"container\">\n        {/* <Routes>\n         \n         <Route exact path=\"/\" element= {<Textform heading=\"Enter Text To Analyze\" mode={mode}  showAlert={showAlert}/>} />\n         \n         <Route exact path=\"/about\" element={<About h1 = \"About US\" text = \"Hello World\" />} /> \n\n       </Routes> */}\n       <Textform heading=\"Enter Text To Analyze\" mode={mode}  showAlert={showAlert}/>\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}